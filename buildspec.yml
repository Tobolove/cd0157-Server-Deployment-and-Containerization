---
version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.7 # Oder 3.9, falls vom Image unterstützt und gewünscht
    commands:
      - echo 'about to call dockerd'
      - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
      - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
      - curl -sS -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/linux/amd64/aws-iam-authenticator

      # --- KUBECTL: KORREKTE/KOMPATIBLE VERSION v1.27.9 VERWENDEN ---
      # Ref: https://docs.aws.amazon.com/eks/latest/userguide/install-kubectl.html
      # Stelle sicher, dass diese Version (+/- 1 Minor Version) zu deinem EKS Cluster passt
      - echo "Downloading kubectl v1.27.9..."
      - curl --fail --silent --location -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl
      - echo "Downloading kubectl v1.27.9 checksum..."
      - curl --fail --silent --location -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.27.9/2024-01-04/bin/linux/amd64/kubectl.sha256
      # --- Checksumme korrekt prüfen (WICHTIG!) ---
      - sha256sum -c kubectl.sha256

      # --- Installation und PATH ---
      - chmod +x ./kubectl ./aws-iam-authenticator
      - export PATH=$PWD/:$PATH
      - python --version
      - echo 'export PATH=$PWD/:$PATH' >> $HOME/.bashrc
      - kubectl version --client --short

      # --- PIP und APT Pakete ---
      - python -m pip install --upgrade --force pip
      # - wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add # (Auskommentiert, wahrscheinlich nicht nötig)
      - echo "Adding Corretto GPG key..."
      - wget -q -O - https://apt.corretto.aws/corretto.key | apt-key add -
      - echo "Running apt-get update and installing packages..."
      - apt-get update && apt-get -y install jq && pip install --upgrade awscli pytest

  pre_build:
    commands:
      - TAG="$REPOSITORY_NAME.$REPOSITORY_BRANCH.$ENVIRONMENT_NAME.$(date +%Y-%m-%d.%H.%M.%S).$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
      - echo "Using image tag: $TAG"
      - echo "Replacing CONTAINER_IMAGE placeholder in simple_jwt_api.yml"
      - sed -i 's@CONTAINER_IMAGE@'"$REPOSITORY_URI:$TAG"'@' simple_jwt_api.yml
      - echo "--- Content of simple_jwt_api.yml after sed: ---" # Zur Überprüfung
      - cat simple_jwt_api.yml                                 # Zur Überprüfung
      - echo "Logging in to Amazon ECR..."
      - $(aws ecr get-login --no-include-email)
      - export KUBECONFIG=$HOME/.kube/config
      - echo "Listing files:"
      - ls -l
      - echo "Installing Python requirements..."
      - pip install -r requirements.txt
      # --- Führe Tests aus (falls benötigt) ---
      - echo "Running tests..."
      - python -m pytest test_main.py

  build:
    commands:
      - echo "Building Docker image..."
      - docker build --tag $REPOSITORY_URI:$TAG .

  post_build:
    commands:
      - echo "Pushing Docker image to ECR..."
      - docker push $REPOSITORY_URI:$TAG
      - echo "Configuring kubectl for EKS cluster: $EKS_CLUSTER_NAME"
      - echo "Using role ARN: $EKS_KUBECTL_ROLE_ARN"
      - aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --role-arn $EKS_KUBECTL_ROLE_ARN
      - echo "Applying Kubernetes configuration..."
      # Füge -v=6 hinzu für mehr Debug-Infos bei Fehlern
      - kubectl apply -f simple_jwt_api.yml #-v=6
      - echo "Creating build artifact..."
      - printf '[{"name":"simple_jwt_api","imageUri":"%s"}]' $REPOSITORY_URI:$TAG > build.json

artifacts:
  files: build.json

env:
  parameter-store:
    JWT_SECRET: JWT_SECRET